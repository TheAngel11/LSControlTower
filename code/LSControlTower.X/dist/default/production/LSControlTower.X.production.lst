

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Apr 18 10:25:13 2023

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    20  0000                     
    21                           ; Version 2.10
    22                           ; Generated 31/07/2019 GMT
    23                           ; 
    24                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4321 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  000200                     __psmallconst:
    58                           	opt callstack 0
    59  000200  00                 	db	0
    60  000201                     _sms:
    61                           	opt callstack 0
    62  000201  31                 	db	49
    63  000202  2D                 	db	45
    64  000203  2D                 	db	45
    65  000204  2D                 	db	45
    66  000205  2D                 	db	45
    67  000206  41                 	db	65
    68  000207  42                 	db	66
    69  000208  43                 	db	67
    70  000209  32                 	db	50
    71  00020A  2D                 	db	45
    72  00020B  44                 	db	68
    73  00020C  45                 	db	69
    74  00020D  46                 	db	70
    75  00020E  33                 	db	51
    76  00020F  2D                 	db	45
    77  000210  47                 	db	71
    78  000211  48                 	db	72
    79  000212  49                 	db	73
    80  000213  34                 	db	52
    81  000214  2D                 	db	45
    82  000215  4A                 	db	74
    83  000216  4B                 	db	75
    84  000217  4C                 	db	76
    85  000218  35                 	db	53
    86  000219  2D                 	db	45
    87  00021A  4D                 	db	77
    88  00021B  4E                 	db	78
    89  00021C  4F                 	db	79
    90  00021D  36                 	db	54
    91  00021E  2D                 	db	45
    92  00021F  50                 	db	80
    93  000220  51                 	db	81
    94  000221  52                 	db	82
    95  000222  53                 	db	83
    96  000223  37                 	db	55
    97  000224  54                 	db	84
    98  000225  55                 	db	85
    99  000226  56                 	db	86
   100  000227  38                 	db	56
   101  000228  2D                 	db	45
   102  000229  57                 	db	87
   103  00022A  58                 	db	88
   104  00022B  59                 	db	89
   105  00022C  5A                 	db	90
   106  00022D  39                 	db	57
   107  00022E  2A                 	db	42
   108  00022F  2D                 	db	45
   109  000230  2D                 	db	45
   110  000231  2D                 	db	45
   111  000232  2D                 	db	45
   112  000233  30                 	db	48
   113  000234  20                 	db	32
   114  000235  2D                 	db	45
   115  000236  2D                 	db	45
   116  000237  2D                 	db	45
   117  000238  23                 	db	35
   118  000239  2D                 	db	45
   119  00023A  2D                 	db	45
   120  00023B  2D                 	db	45
   121  00023C  2D                 	db	45
   122  00023D                     __end_of_sms:
   123                           	opt callstack 0
   124  00023D                     _keyNumber:
   125                           	opt callstack 0
   126  00023D  01                 	db	1
   127  00023E  02                 	db	2
   128  00023F  03                 	db	3
   129  000240  04                 	db	4
   130  000241  05                 	db	5
   131  000242  06                 	db	6
   132  000243  07                 	db	7
   133  000244  08                 	db	8
   134  000245  09                 	db	9
   135  000246  0A                 	db	10
   136  000247  0B                 	db	11
   137  000248  0C                 	db	12
   138  000249                     __end_of_keyNumber:
   139                           	opt callstack 0
   140  0000                     _TMR0	set	4054
   141  0000                     _TXSTAbits	set	4012
   142  0000                     _SPBRG	set	4015
   143  0000                     _RCSTAbits	set	4011
   144  0000                     _PORTC	set	3970
   145  0000                     _PORTB	set	3969
   146  0000                     _LATCbits	set	3979
   147  0000                     _TMR0L	set	4054
   148  0000                     _T0CON	set	4053
   149  0000                     _INTCONbits	set	4082
   150  0000                     _RCONbits	set	4048
   151  0000                     _OSCTUNEbits	set	3995
   152  0000                     _OSCCON	set	4051
   153  0000                     _TMR0IF	set	32658
   154                           
   155                           ; #config settings
   156  000249  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           	psect	cinit
   159  0004E4                     __pcinit:
   160                           	opt callstack 0
   161  0004E4                     start_initialization:
   162                           	opt callstack 0
   163  0004E4                     __initialization:
   164                           	opt callstack 0
   165                           
   166                           ; Clear objects allocated to COMRAM (37 bytes)
   167  0004E4  EE00  F001         	lfsr	0,__pbssCOMRAM
   168  0004E8  0E25               	movlw	37
   169  0004EA                     clear_0:
   170  0004EA  6AEE               	clrf	postinc0,c
   171  0004EC  06E8               	decf	wreg,f,c
   172  0004EE  E1FD               	bnz	clear_0
   173  0004F0                     end_of_initialization:
   174                           	opt callstack 0
   175  0004F0                     __end_of__initialization:
   176                           	opt callstack 0
   177  0004F0  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   178  0004F2  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   179  0004F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  0004F6  6EF8               	movwf	tblptru,c
   181  0004F8  0100               	movlb	0
   182  0004FA  EF7F  F002         	goto	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMRAM
   185  000001                     __pbssCOMRAM:
   186                           	opt callstack 0
   187  000001                     _Timers:
   188                           	opt callstack 0
   189  000001                     	ds	20
   190  000015                     _Tics:
   191                           	opt callstack 0
   192  000015                     	ds	4
   193  000019                     motorKeypad@keyAux:
   194                           	opt callstack 0
   195  000019                     	ds	1
   196  00001A                     motorKeypad@rowPressed:
   197                           	opt callstack 0
   198  00001A                     	ds	1
   199  00001B                     motorKeypad@colPressed:
   200                           	opt callstack 0
   201  00001B                     	ds	1
   202  00001C                     motorKeypad@state:
   203                           	opt callstack 0
   204  00001C                     	ds	1
   205  00001D                     _indexSMS:
   206                           	opt callstack 0
   207  00001D                     	ds	1
   208  00001E                     _keyNum:
   209                           	opt callstack 0
   210  00001E                     	ds	1
   211  00001F                     _key:
   212                           	opt callstack 0
   213  00001F                     	ds	1
   214  000020                     	ds	1
   215  000021                     	ds	1
   216  000022                     	ds	1
   217  000023                     	ds	1
   218  000024                     _tmr_bounce:
   219                           	opt callstack 0
   220  000024                     	ds	1
   221  000025                     	ds	1
   222                           
   223                           	psect	cstackCOMRAM
   224  000026                     __pcstackCOMRAM:
   225                           	opt callstack 0
   226  000026                     ?_TI_GetTics:
   227                           	opt callstack 0
   228  000026                     TI_Init@counter:
   229                           	opt callstack 0
   230  000026                     TI_ResetTics@TimerHandle:
   231                           	opt callstack 0
   232                           
   233                           ; 1 bytes @ 0x0
   234  000026                     	ds	4
   235  00002A                     ??_TI_GetTics:
   236                           
   237                           ; 1 bytes @ 0x4
   238  00002A                     	ds	4
   239  00002E                     TI_GetTics@CopiaTicsActual:
   240                           	opt callstack 0
   241                           
   242                           ; 4 bytes @ 0x8
   243  00002E                     	ds	4
   244  000032                     TI_GetTics@TimerHandle:
   245                           	opt callstack 0
   246                           
   247                           ; 1 bytes @ 0xC
   248  000032                     	ds	1
   249  000033                     ??_motorKeypad:
   250                           
   251                           ; 1 bytes @ 0xD
   252  000033                     	ds	2
   253  000035                     _motorKeypad$590:
   254                           	opt callstack 0
   255                           
   256                           ; 2 bytes @ 0xF
   257  000035                     	ds	2
   258  000037                     _motorKeypad$591:
   259                           	opt callstack 0
   260                           
   261                           ; 2 bytes @ 0x11
   262  000037                     	ds	2
   263  000039                     
   264                           ; 1 bytes @ 0x13
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 18 in file "main.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;		None
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : 0/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMRAM   BANK0   BANK1
   284 ;;      Params:         0       0       0
   285 ;;      Locals:         0       0       0
   286 ;;      Temps:          0       0       0
   287 ;;      Totals:         0       0       0
   288 ;;Total ram usage:        0 bytes
   289 ;; Hardware stack levels required when called:    4
   290 ;; This function calls:
   291 ;;		_TI_Init
   292 ;;		_initSIO
   293 ;;		_motorKeypad
   294 ;; This function is called by:
   295 ;;		Startup code after reset
   296 ;; This function uses a non-reentrant model
   297 ;;
   298                           
   299                           	psect	text0
   300  0004FE                     __ptext0:
   301                           	opt callstack 0
   302  0004FE                     _main:
   303                           	opt callstack 27
   304                           
   305                           ;main.c: 22:     TI_Init ();
   306                           
   307                           ;incstack = 0
   308  0004FE  0E60               	movlw	96
   309  000500  6ED3               	movwf	211,c	;volatile
   310                           
   311                           ;main.c: 23:     initSIO();
   312  000502  8C9B               	bsf	155,6,c	;volatile
   313  000504  9ED0               	bcf	208,7,c	;volatile
   314  000506  8CF2               	bsf	242,6,c	;volatile
   315  000508  8EF2               	bsf	242,7,c	;volatile
   316  00050A  EC4B  F002         	call	_TI_Init	;wreg free
   317  00050E  EC98  F002         	call	_initSIO	;wreg free
   318  000512                     l1273:
   319                           
   320                           ;main.c: 46:         motorKeypad();
   321  000512  EC25  F001         	call	_motorKeypad	;wreg free
   322  000516  D7FD               	goto	l1273
   323  000518                     __end_of_main:
   324                           	opt callstack 0
   325                           
   326 ;; *************** function _motorKeypad *****************
   327 ;; Defined at:
   328 ;;		line 40 in file "Keypad.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1
   342 ;;      Params:         0       0       0
   343 ;;      Locals:         4       0       0
   344 ;;      Temps:          2       0       0
   345 ;;      Totals:         6       0       0
   346 ;;Total ram usage:        6 bytes
   347 ;; Hardware stack levels used:    1
   348 ;; Hardware stack levels required when called:    3
   349 ;; This function calls:
   350 ;;		_TI_GetTics
   351 ;;		_TI_ResetTics
   352 ;; This function is called by:
   353 ;;		_main
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357                           	psect	text1
   358  00024A                     __ptext1:
   359                           	opt callstack 0
   360  00024A                     _motorKeypad:
   361                           	opt callstack 27
   362                           
   363                           ;Keypad.c: 41:  static char state = 0;;Keypad.c: 42:     static char colPressed;;Keypad.
      +                          c: 43:     static char rowPressed;;Keypad.c: 44:     static char keyAux;;Keypad.c: 46:  
      +                          switch(state) {
   364                           
   365                           ;incstack = 0
   366  00024A  D0E4               	goto	l1253
   367  00024C                     l1155:
   368                           
   369                           ;Keypad.c: 48:    if ((PORTB & 0x0F) == 0x0F) {
   370  00024C  5081               	movf	129,w,c	;volatile
   371  00024E  0B0F               	andlw	15
   372  000250  0A0F               	xorlw	15
   373  000252  A4D8               	btfss	status,2,c
   374  000254  D006               	goto	l1161
   375                           
   376                           ;Keypad.c: 49:     LATCbits.LATC0 = 1;
   377  000256  808B               	bsf	139,0,c	;volatile
   378                           
   379                           ;Keypad.c: 50:     LATCbits.LATC1 = 0;
   380  000258  928B               	bcf	139,1,c	;volatile
   381                           
   382                           ;Keypad.c: 51:     LATCbits.LATC2 = 1;
   383  00025A  848B               	bsf	139,2,c	;volatile
   384                           
   385                           ;Keypad.c: 52:     state = 1;
   386  00025C  0E01               	movlw	1
   387  00025E  6E1C               	movwf	motorKeypad@state^0,c
   388                           
   389                           ;Keypad.c: 53:    }
   390  000260  0012               	return	
   391  000262                     l1161:
   392  000262  5081               	movf	129,w,c	;volatile
   393  000264  0B0F               	andlw	15
   394  000266  0A0F               	xorlw	15
   395  000268  B4D8               	btfsc	status,2,c
   396  00026A  0012               	return	
   397                           
   398                           ;Keypad.c: 55:     TI_ResetTics(tmr_bounce);
   399  00026C  5024               	movf	_tmr_bounce^0,w,c
   400  00026E  EC60  F002         	call	_TI_ResetTics
   401  000272                     l1165:
   402                           
   403                           ;Keypad.c: 56:     state = 3;
   404  000272  0E03               	movlw	3
   405  000274  6E1C               	movwf	motorKeypad@state^0,c
   406  000276  0012               	return	
   407  000278                     l1167:
   408                           
   409                           ;Keypad.c: 60:    if ((PORTB & 0x0F) == 0x0F) {
   410  000278  5081               	movf	129,w,c	;volatile
   411  00027A  0B0F               	andlw	15
   412  00027C  0A0F               	xorlw	15
   413  00027E  A4D8               	btfss	status,2,c
   414  000280  D006               	goto	l1173
   415                           
   416                           ;Keypad.c: 61:     LATCbits.LATC0 = 1;
   417  000282  808B               	bsf	139,0,c	;volatile
   418                           
   419                           ;Keypad.c: 62:     LATCbits.LATC1 = 1;
   420  000284  828B               	bsf	139,1,c	;volatile
   421                           
   422                           ;Keypad.c: 63:     LATCbits.LATC2 = 0;
   423  000286  948B               	bcf	139,2,c	;volatile
   424                           
   425                           ;Keypad.c: 64:     state = 2;
   426  000288  0E02               	movlw	2
   427  00028A  6E1C               	movwf	motorKeypad@state^0,c
   428                           
   429                           ;Keypad.c: 65:    }
   430  00028C  0012               	return	
   431  00028E                     l1173:
   432  00028E  5081               	movf	129,w,c	;volatile
   433  000290  0B0F               	andlw	15
   434  000292  0A0F               	xorlw	15
   435  000294  B4D8               	btfsc	status,2,c
   436  000296  0012               	return	
   437                           
   438                           ;Keypad.c: 67:     TI_ResetTics(tmr_bounce);
   439  000298  5024               	movf	_tmr_bounce^0,w,c
   440  00029A  EC60  F002         	call	_TI_ResetTics
   441  00029E  D7E9               	goto	l1165
   442  0002A0                     l1179:
   443                           
   444                           ;Keypad.c: 72:    if ((PORTB & 0x0F) == 0x0F) {
   445  0002A0  5081               	movf	129,w,c	;volatile
   446  0002A2  0B0F               	andlw	15
   447  0002A4  0A0F               	xorlw	15
   448  0002A6  A4D8               	btfss	status,2,c
   449  0002A8  D006               	goto	l1185
   450  0002AA                     u220:
   451                           
   452                           ;Keypad.c: 73:     LATCbits.LATC0 = 0;
   453  0002AA  908B               	bcf	139,0,c	;volatile
   454                           
   455                           ;Keypad.c: 74:     LATCbits.LATC1 = 1;
   456  0002AC  828B               	bsf	139,1,c	;volatile
   457                           
   458                           ;Keypad.c: 75:     LATCbits.LATC2 = 1;
   459  0002AE  848B               	bsf	139,2,c	;volatile
   460  0002B0                     l1183:
   461                           
   462                           ;Keypad.c: 76:     state = 0;
   463  0002B0  0E00               	movlw	0
   464  0002B2  6E1C               	movwf	motorKeypad@state^0,c
   465                           
   466                           ;Keypad.c: 77:    }
   467  0002B4  0012               	return	
   468  0002B6                     l1185:
   469  0002B6  5081               	movf	129,w,c	;volatile
   470  0002B8  0B0F               	andlw	15
   471  0002BA  0A0F               	xorlw	15
   472  0002BC  B4D8               	btfsc	status,2,c
   473  0002BE  0012               	return	
   474                           
   475                           ;Keypad.c: 79:     TI_ResetTics(tmr_bounce);
   476  0002C0  5024               	movf	_tmr_bounce^0,w,c
   477  0002C2  EC60  F002         	call	_TI_ResetTics
   478  0002C6  D7D5               	goto	l1165
   479  0002C8                     l1191:
   480                           
   481                           ;Keypad.c: 84:    if ((TI_GetTics(tmr_bounce) >= 100) && ((PORTB & 0x0F) != 0x0F) ) {
   482  0002C8  5024               	movf	_tmr_bounce^0,w,c
   483  0002CA  EC25  F002         	call	_TI_GetTics
   484  0002CE  5029               	movf	(?_TI_GetTics+3)^0,w,c
   485  0002D0  1028               	iorwf	(?_TI_GetTics+2)^0,w,c
   486  0002D2  1027               	iorwf	(?_TI_GetTics+1)^0,w,c
   487  0002D4  E104               	bnz	u240
   488  0002D6  0E64               	movlw	100
   489  0002D8  5C26               	subwf	?_TI_GetTics^0,w,c
   490  0002DA  A0D8               	btfss	status,0,c
   491  0002DC  D06E               	goto	l1227
   492  0002DE                     u240:
   493  0002DE  5081               	movf	129,w,c	;volatile
   494  0002E0  0B0F               	andlw	15
   495  0002E2  0A0F               	xorlw	15
   496  0002E4  B4D8               	btfsc	status,2,c
   497  0002E6  D069               	goto	l1227
   498                           
   499                           ;Keypad.c: 85:     colPressed = ((~(PORTC & 0X07)) >> 1) & 0x7F;
   500  0002E8  5082               	movf	130,w,c	;volatile
   501  0002EA  0B07               	andlw	7
   502  0002EC  0AFF               	xorlw	255
   503  0002EE  6E33               	movwf	??_motorKeypad^0,c
   504  0002F0  90D8               	bcf	status,0,c
   505  0002F2  3033               	rrcf	??_motorKeypad^0,w,c
   506  0002F4  0B7F               	andlw	127
   507  0002F6  6E1B               	movwf	motorKeypad@colPressed^0,c
   508                           
   509                           ;Keypad.c: 86:     rowPressed = ((~(PORTB & 0x0F)) >> 1) & 0x7F;
   510  0002F8  5081               	movf	129,w,c	;volatile
   511  0002FA  0B0F               	andlw	15
   512  0002FC  0AFF               	xorlw	255
   513  0002FE  6E33               	movwf	??_motorKeypad^0,c
   514  000300  90D8               	bcf	status,0,c
   515  000302  3033               	rrcf	??_motorKeypad^0,w,c
   516  000304  0B7F               	andlw	127
   517  000306  6E1A               	movwf	motorKeypad@rowPressed^0,c
   518                           
   519                           ;Keypad.c: 87:     rowPressed = rowPressed == 3 ? 2 : rowPressed;
   520  000308  0E03               	movlw	3
   521  00030A  181A               	xorwf	motorKeypad@rowPressed^0,w,c
   522  00030C  B4D8               	btfsc	status,2,c
   523  00030E  D004               	goto	l1199
   524  000310  C01A  F035         	movff	motorKeypad@rowPressed,_motorKeypad$590
   525  000314  6A36               	clrf	(_motorKeypad$590+1)^0,c
   526  000316  D004               	goto	l1201
   527  000318                     l1199:
   528  000318  0E00               	movlw	0
   529  00031A  6E36               	movwf	(_motorKeypad$590+1)^0,c
   530  00031C  0E02               	movlw	2
   531  00031E  6E35               	movwf	_motorKeypad$590^0,c
   532  000320                     l1201:
   533  000320  C035  F01A         	movff	_motorKeypad$590,motorKeypad@rowPressed
   534                           
   535                           ;Keypad.c: 88:     rowPressed = rowPressed > 3 ? 3 : rowPressed;
   536  000324  0E04               	movlw	4
   537  000326  601A               	cpfslt	motorKeypad@rowPressed^0,c
   538  000328  D004               	goto	l1207
   539  00032A  C01A  F037         	movff	motorKeypad@rowPressed,_motorKeypad$591
   540  00032E  6A38               	clrf	(_motorKeypad$591+1)^0,c
   541  000330  D004               	goto	l1209
   542  000332                     l1207:
   543  000332  0E00               	movlw	0
   544  000334  6E38               	movwf	(_motorKeypad$591+1)^0,c
   545  000336  0E03               	movlw	3
   546  000338  6E37               	movwf	_motorKeypad$591^0,c
   547  00033A                     l1209:
   548  00033A  C037  F01A         	movff	_motorKeypad$591,motorKeypad@rowPressed
   549                           
   550                           ;Keypad.c: 89:     keyNum = keyNumber[rowPressed][colPressed];
   551  00033E  501A               	movf	motorKeypad@rowPressed^0,w,c
   552  000340  0D03               	mullw	3
   553  000342  50F3               	movf	243,w,c
   554  000344  0F3D               	addlw	low _keyNumber
   555  000346  241B               	addwf	motorKeypad@colPressed^0,w,c
   556  000348  6E33               	movwf	??_motorKeypad^0,c
   557  00034A  C033  FFF6         	movff	??_motorKeypad,tblptrl
   558  00034E                     	if	1	;There is more than 1 active tblptr byte
   559  00034E  0E02               	movlw	high __smallconst
   560  000350  6EF7               	movwf	tblptrh,c
   561  000352                     	endif
   562  000352                     	if	0	;tblptru may be non-zero
   563  000352                     	endif
   564  000352                     	if	0	;tblptru may be non-zero
   565  000352                     	endif
   566  000352  0008               	tblrd		*
   567  000354  CFF5 F01E          	movff	tablat,_keyNum
   568                           
   569                           ;Keypad.c: 91:     keyAux = sms[rowPressed][colPressed][indexSMS++];
   570  000358  501B               	movf	motorKeypad@colPressed^0,w,c
   571  00035A  0D05               	mullw	5
   572  00035C  CFF3 F033          	movff	prodl,??_motorKeypad
   573  000360  501A               	movf	motorKeypad@rowPressed^0,w,c
   574  000362  0D0F               	mullw	15
   575  000364  50F3               	movf	243,w,c
   576  000366  0F01               	addlw	low _sms
   577  000368  2433               	addwf	??_motorKeypad^0,w,c
   578  00036A  241D               	addwf	_indexSMS^0,w,c
   579  00036C  6E34               	movwf	(??_motorKeypad+1)^0,c
   580  00036E  C034  FFF6         	movff	??_motorKeypad+1,tblptrl
   581  000372                     	if	1	;There is more than 1 active tblptr byte
   582  000372  0E02               	movlw	high __smallconst
   583  000374  6EF7               	movwf	tblptrh,c
   584  000376                     	endif
   585  000376                     	if	0	;tblptru may be non-zero
   586  000376                     	endif
   587  000376                     	if	0	;tblptru may be non-zero
   588  000376                     	endif
   589  000376  0008               	tblrd		*
   590  000378  CFF5 F019          	movff	tablat,motorKeypad@keyAux
   591  00037C  2A1D               	incf	_indexSMS^0,f,c
   592                           
   593                           ;Keypad.c: 92:     if(keyAux == '-') {
   594  00037E  0E2D               	movlw	45
   595  000380  1819               	xorwf	motorKeypad@keyAux^0,w,c
   596  000382  A4D8               	btfss	status,2,c
   597  000384  D015               	goto	l247
   598                           
   599                           ;Keypad.c: 93:         indexSMS = 0;
   600  000386  0E00               	movlw	0
   601  000388  6E1D               	movwf	_indexSMS^0,c
   602                           
   603                           ;Keypad.c: 94:         key = sms[rowPressed][colPressed][indexSMS++];
   604  00038A  501B               	movf	motorKeypad@colPressed^0,w,c
   605  00038C  0D05               	mullw	5
   606  00038E  CFF3 F033          	movff	prodl,??_motorKeypad
   607  000392  501A               	movf	motorKeypad@rowPressed^0,w,c
   608  000394  0D0F               	mullw	15
   609  000396  50F3               	movf	243,w,c
   610  000398  0F01               	addlw	low _sms
   611  00039A  2433               	addwf	??_motorKeypad^0,w,c
   612  00039C  6E34               	movwf	(??_motorKeypad+1)^0,c
   613  00039E  C034  FFF6         	movff	??_motorKeypad+1,tblptrl
   614  0003A2                     	if	1	;There is more than 1 active tblptr byte
   615  0003A2  0E02               	movlw	high __smallconst
   616  0003A4  6EF7               	movwf	tblptrh,c
   617  0003A6                     	endif
   618  0003A6                     	if	0	;tblptru may be non-zero
   619  0003A6                     	endif
   620  0003A6                     	if	0	;tblptru may be non-zero
   621  0003A6                     	endif
   622  0003A6  0008               	tblrd		*
   623  0003A8  CFF5 F01F          	movff	tablat,_key
   624  0003AC  2A1D               	incf	_indexSMS^0,f,c
   625                           
   626                           ;Keypad.c: 95:     } else {
   627  0003AE  D002               	goto	l1225
   628  0003B0                     l247:
   629                           
   630                           ;Keypad.c: 96:         key = keyAux;
   631  0003B0  C019  F01F         	movff	motorKeypad@keyAux,_key
   632  0003B4                     l1225:
   633                           
   634                           ;Keypad.c: 98:     state = 4;
   635  0003B4  0E04               	movlw	4
   636  0003B6  6E1C               	movwf	motorKeypad@state^0,c
   637                           
   638                           ;Keypad.c: 99:    }
   639  0003B8  0012               	return	
   640  0003BA                     l1227:
   641  0003BA  5081               	movf	129,w,c	;volatile
   642  0003BC  0B0F               	andlw	15
   643  0003BE  0A0F               	xorlw	15
   644  0003C0  A4D8               	btfss	status,2,c
   645  0003C2  0012               	return	
   646  0003C4  D772               	goto	u220
   647  0003C6                     l1233:
   648                           
   649                           ;Keypad.c: 108:    if ((PORTB & 0x0F) == 0x0F) {
   650  0003C6  5081               	movf	129,w,c	;volatile
   651  0003C8  0B0F               	andlw	15
   652  0003CA  0A0F               	xorlw	15
   653  0003CC  A4D8               	btfss	status,2,c
   654  0003CE  0012               	return	
   655                           
   656                           ;Keypad.c: 109:     TI_ResetTics(tmr_bounce);
   657  0003D0  5024               	movf	_tmr_bounce^0,w,c
   658  0003D2  EC60  F002         	call	_TI_ResetTics
   659                           
   660                           ;Keypad.c: 110:     state = 5;
   661  0003D6  0E05               	movlw	5
   662  0003D8  6E1C               	movwf	motorKeypad@state^0,c
   663  0003DA  0012               	return	
   664  0003DC                     l1239:
   665                           
   666                           ;Keypad.c: 114:    if ((TI_GetTics(tmr_bounce) >= 100) && ((PORTB & 0x0F) == 0x0F) ) {
   667  0003DC  5024               	movf	_tmr_bounce^0,w,c
   668  0003DE  EC25  F002         	call	_TI_GetTics
   669  0003E2  5029               	movf	(?_TI_GetTics+3)^0,w,c
   670  0003E4  1028               	iorwf	(?_TI_GetTics+2)^0,w,c
   671  0003E6  1027               	iorwf	(?_TI_GetTics+1)^0,w,c
   672  0003E8  E104               	bnz	u310
   673  0003EA  0E64               	movlw	100
   674  0003EC  5C26               	subwf	?_TI_GetTics^0,w,c
   675  0003EE  A0D8               	btfss	status,0,c
   676  0003F0  D00B               	goto	l1247
   677  0003F2                     u310:
   678  0003F2  5081               	movf	129,w,c	;volatile
   679  0003F4  0B0F               	andlw	15
   680  0003F6  0A0F               	xorlw	15
   681  0003F8  A4D8               	btfss	status,2,c
   682  0003FA  D006               	goto	l1247
   683                           
   684                           ;Keypad.c: 115:     LATCbits.LATC0 = 0;
   685  0003FC  908B               	bcf	139,0,c	;volatile
   686                           
   687                           ;Keypad.c: 116:     LATCbits.LATC1 = 1;
   688  0003FE  828B               	bsf	139,1,c	;volatile
   689                           
   690                           ;Keypad.c: 117:     LATCbits.LATC2 = 1;
   691  000400  848B               	bsf	139,2,c	;volatile
   692                           
   693                           ;Keypad.c: 118:     keyNum = -1;
   694  000402  681E               	setf	_keyNum^0,c
   695                           
   696                           ;Keypad.c: 119:     key = -1;
   697  000404  681F               	setf	_key^0,c
   698  000406  D754               	goto	l1183
   699  000408                     l1247:
   700  000408  5081               	movf	129,w,c	;volatile
   701  00040A  0B0F               	andlw	15
   702  00040C  0A0F               	xorlw	15
   703  00040E  B4D8               	btfsc	status,2,c
   704  000410  0012               	return	
   705  000412  D7D0               	goto	l1225
   706  000414                     l1253:
   707  000414  501C               	movf	motorKeypad@state^0,w,c
   708  000416  6E33               	movwf	??_motorKeypad^0,c
   709  000418  6A34               	clrf	(??_motorKeypad+1)^0,c
   710                           
   711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   712                           ; Switch size 1, requested type "simple"
   713                           ; Number of cases is 1, Range of values is 0 to 0
   714                           ; switch strategies available:
   715                           ; Name         Instructions Cycles
   716                           ; simple_byte            4     3 (average)
   717                           ;	Chosen strategy is simple_byte
   718  00041A  5034               	movf	(??_motorKeypad+1)^0,w,c
   719  00041C  0A00               	xorlw	0	; case 0
   720  00041E  A4D8               	btfss	status,2,c
   721  000420  0012               	return	
   722                           
   723                           ; Switch size 1, requested type "simple"
   724                           ; Number of cases is 6, Range of values is 0 to 5
   725                           ; switch strategies available:
   726                           ; Name         Instructions Cycles
   727                           ; simple_byte           19    10 (average)
   728                           ;	Chosen strategy is simple_byte
   729  000422  5033               	movf	??_motorKeypad^0,w,c
   730  000424  0A00               	xorlw	0	; case 0
   731  000426  B4D8               	btfsc	status,2,c
   732  000428  D711               	goto	l1155
   733  00042A  0A01               	xorlw	1	; case 1
   734  00042C  B4D8               	btfsc	status,2,c
   735  00042E  D724               	goto	l1167
   736  000430  0A03               	xorlw	3	; case 2
   737  000432  B4D8               	btfsc	status,2,c
   738  000434  D735               	goto	l1179
   739  000436  0A01               	xorlw	1	; case 3
   740  000438  B4D8               	btfsc	status,2,c
   741  00043A  D746               	goto	l1191
   742  00043C  0A07               	xorlw	7	; case 4
   743  00043E  B4D8               	btfsc	status,2,c
   744  000440  D7C2               	goto	l1233
   745  000442  0A01               	xorlw	1	; case 5
   746  000444  A4D8               	btfss	status,2,c
   747  000446  0012               	return	
   748  000448  D7C9               	goto	l1239
   749  00044A                     __end_of_motorKeypad:
   750                           	opt callstack 0
   751                           
   752 ;; *************** function _TI_ResetTics *****************
   753 ;; Defined at:
   754 ;;		line 55 in file "TAD_TIMER.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  TimerHandle     1    wreg     unsigned char 
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  TimerHandle     1    0[COMRAM] unsigned char 
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1
   768 ;;      Params:         0       0       0
   769 ;;      Locals:         1       0       0
   770 ;;      Temps:          0       0       0
   771 ;;      Totals:         1       0       0
   772 ;;Total ram usage:        1 bytes
   773 ;; Hardware stack levels used:    1
   774 ;; Hardware stack levels required when called:    2
   775 ;; This function calls:
   776 ;;		Nothing
   777 ;; This function is called by:
   778 ;;		_motorKeypad
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text2
   783  0004C0                     __ptext2:
   784                           	opt callstack 0
   785  0004C0                     _TI_ResetTics:
   786                           	opt callstack 27
   787                           
   788                           ;incstack = 0
   789                           ;TI_ResetTics@TimerHandle stored from wreg
   790  0004C0  6E26               	movwf	TI_ResetTics@TimerHandle^0,c
   791                           
   792                           ;TAD_TIMER.c: 56:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
   793  0004C2  9EF2               	bcf	242,7,c	;volatile
   794  0004C4  5026               	movf	TI_ResetTics@TimerHandle^0,w,c
   795  0004C6  0D05               	mullw	5
   796  0004C8  50F3               	movf	243,w,c
   797  0004CA  0F01               	addlw	low _Timers
   798  0004CC  6ED9               	movwf	fsr2l,c
   799  0004CE  6ADA               	clrf	fsr2h,c
   800  0004D0  C015  FFDE         	movff	_Tics,postinc2	;volatile
   801  0004D4  C016  FFDE         	movff	_Tics+1,postinc2	;volatile
   802  0004D8  C017  FFDE         	movff	_Tics+2,postinc2	;volatile
   803  0004DC  C018  FFDE         	movff	_Tics+3,postinc2	;volatile
   804  0004E0  8EF2               	bsf	242,7,c	;volatile
   805  0004E2  0012               	return		;funcret
   806  0004E4                     __end_of_TI_ResetTics:
   807                           	opt callstack 0
   808                           
   809 ;; *************** function _TI_GetTics *****************
   810 ;; Defined at:
   811 ;;		line 60 in file "TAD_TIMER.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  TimerHandle     1    wreg     unsigned char 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  TimerHandle     1   12[COMRAM] unsigned char 
   816 ;;  CopiaTicsAct    4    8[COMRAM] unsigned long 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  4    0[COMRAM] unsigned long 
   819 ;; Registers used:
   820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1
   826 ;;      Params:         4       0       0
   827 ;;      Locals:         5       0       0
   828 ;;      Temps:          4       0       0
   829 ;;      Totals:        13       0       0
   830 ;;Total ram usage:       13 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    2
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_motorKeypad
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text3
   841  00044A                     __ptext3:
   842                           	opt callstack 0
   843  00044A                     _TI_GetTics:
   844                           	opt callstack 27
   845                           
   846                           ;incstack = 0
   847                           ;TI_GetTics@TimerHandle stored from wreg
   848  00044A  6E32               	movwf	TI_GetTics@TimerHandle^0,c
   849                           
   850                           ;TAD_TIMER.c: 61:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
   851  00044C  9EF2               	bcf	242,7,c	;volatile
   852  00044E  C015  F02E         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
   853  000452  C016  F02F         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
   854  000456  C017  F030         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
   855  00045A  C018  F031         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
   856  00045E  8EF2               	bsf	242,7,c	;volatile
   857                           
   858                           ;TAD_TIMER.c: 62:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
   859  000460  5032               	movf	TI_GetTics@TimerHandle^0,w,c
   860  000462  0D05               	mullw	5
   861  000464  50F3               	movf	243,w,c
   862  000466  0F01               	addlw	low _Timers
   863  000468  6ED9               	movwf	fsr2l,c
   864  00046A  6ADA               	clrf	fsr2h,c
   865  00046C  CFDE F02A          	movff	postinc2,??_TI_GetTics
   866  000470  CFDE F02B          	movff	postinc2,??_TI_GetTics+1
   867  000474  CFDE F02C          	movff	postinc2,??_TI_GetTics+2
   868  000478  CFDE F02D          	movff	postinc2,??_TI_GetTics+3
   869  00047C  502A               	movf	??_TI_GetTics^0,w,c
   870  00047E  5C2E               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
   871  000480  6E26               	movwf	?_TI_GetTics^0,c
   872  000482  502B               	movf	(??_TI_GetTics+1)^0,w,c
   873  000484  582F               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
   874  000486  6E27               	movwf	(?_TI_GetTics+1)^0,c
   875  000488  502C               	movf	(??_TI_GetTics+2)^0,w,c
   876  00048A  5830               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
   877  00048C  6E28               	movwf	(?_TI_GetTics+2)^0,c
   878  00048E  502D               	movf	(??_TI_GetTics+3)^0,w,c
   879  000490  5831               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
   880  000492  6E29               	movwf	(?_TI_GetTics+3)^0,c
   881  000494  0012               	return		;funcret
   882  000496                     __end_of_TI_GetTics:
   883                           	opt callstack 0
   884                           
   885 ;; *************** function _initSIO *****************
   886 ;; Defined at:
   887 ;;		line 5 in file "SIO.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, status,2
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1
   901 ;;      Params:         0       0       0
   902 ;;      Locals:         0       0       0
   903 ;;      Temps:          0       0       0
   904 ;;      Totals:         0       0       0
   905 ;;Total ram usage:        0 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    2
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text4
   916  000530                     __ptext4:
   917                           	opt callstack 0
   918  000530                     _initSIO:
   919                           	opt callstack 28
   920                           
   921                           ;SIO.c: 7:     RCSTAbits.SPEN = 1;
   922                           
   923                           ;incstack = 0
   924  000530  8EAB               	bsf	171,7,c	;volatile
   925                           
   926                           ;SIO.c: 8:  RCSTAbits.RX9 = 0;
   927  000532  9CAB               	bcf	171,6,c	;volatile
   928                           
   929                           ;SIO.c: 10:  SPBRG = 64;
   930  000534  0E40               	movlw	64
   931  000536  6EAF               	movwf	175,c	;volatile
   932                           
   933                           ;SIO.c: 11:     TXSTAbits.TXEN = 1;
   934  000538  8AAC               	bsf	172,5,c	;volatile
   935                           
   936                           ;SIO.c: 12:  RCSTAbits.CREN = 1;
   937  00053A  88AB               	bsf	171,4,c	;volatile
   938  00053C  0012               	return		;funcret
   939  00053E                     __end_of_initSIO:
   940                           	opt callstack 0
   941                           
   942 ;; *************** function _TI_Init *****************
   943 ;; Defined at:
   944 ;;		line 34 in file "TAD_TIMER.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  counter         1    0[COMRAM] unsigned char 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1
   958 ;;      Params:         0       0       0
   959 ;;      Locals:         1       0       0
   960 ;;      Temps:          0       0       0
   961 ;;      Totals:         1       0       0
   962 ;;Total ram usage:        1 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    2
   965 ;; This function calls:
   966 ;;		Nothing
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text5
   973  000496                     __ptext5:
   974                           	opt callstack 0
   975  000496                     _TI_Init:
   976                           	opt callstack 28
   977                           
   978                           ;TAD_TIMER.c: 35:  for (unsigned char counter=0; counter<4; counter++) {
   979                           
   980                           ;incstack = 0
   981  000496  0E00               	movlw	0
   982  000498  6E26               	movwf	TI_Init@counter^0,c
   983  00049A                     l993:
   984                           
   985                           ;TAD_TIMER.c: 36:   Timers[counter].Busy=0;
   986  00049A  5026               	movf	TI_Init@counter^0,w,c
   987  00049C  0D05               	mullw	5
   988  00049E  50F3               	movf	243,w,c
   989  0004A0  0F05               	addlw	low (_Timers+4)
   990  0004A2  6ED9               	movwf	fsr2l,c
   991  0004A4  6ADA               	clrf	fsr2h,c
   992  0004A6  0E00               	movlw	0
   993  0004A8  6EDF               	movwf	indf2,c
   994                           
   995                           ;TAD_TIMER.c: 37:  }
   996  0004AA  2A26               	incf	TI_Init@counter^0,f,c
   997  0004AC  0E03               	movlw	3
   998  0004AE  6426               	cpfsgt	TI_Init@counter^0,c
   999  0004B0  D7F4               	goto	l993
  1000                           
  1001                           ;TAD_TIMER.c: 38:  T0CON=0b11000001;
  1002  0004B2  0EC1               	movlw	193
  1003  0004B4  6ED5               	movwf	213,c	;volatile
  1004                           
  1005                           ;TAD_TIMER.c: 39:     TMR0L=56;
  1006  0004B6  0E38               	movlw	56
  1007  0004B8  6ED6               	movwf	214,c	;volatile
  1008                           
  1009                           ;TAD_TIMER.c: 40:  INTCONbits.TMR0IF = 0;
  1010  0004BA  94F2               	bcf	242,2,c	;volatile
  1011                           
  1012                           ;TAD_TIMER.c: 41:  INTCONbits.TMR0IE = 1;
  1013  0004BC  8AF2               	bsf	242,5,c	;volatile
  1014  0004BE  0012               	return		;funcret
  1015  0004C0                     __end_of_TI_Init:
  1016                           	opt callstack 0
  1017                           
  1018 ;; *************** function _High_RSI *****************
  1019 ;; Defined at:
  1020 ;;		line 14 in file "main.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg, status,2, status,0, cstack
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1
  1034 ;;      Params:         0       0       0
  1035 ;;      Locals:         0       0       0
  1036 ;;      Temps:          0       0       0
  1037 ;;      Totals:         0       0       0
  1038 ;;Total ram usage:        0 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    1
  1041 ;; This function calls:
  1042 ;;		_RSI_Timer0
  1043 ;; This function is called by:
  1044 ;;		Interrupt level 2
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	intcode
  1049  000008                     __pintcode:
  1050                           	opt callstack 0
  1051  000008                     _High_RSI:
  1052                           	opt callstack 27
  1053                           
  1054                           ;incstack = 0
  1055  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1056                           
  1057                           ;main.c: 15:     RCONbits.IPEN = 0;
  1058  00000A  EC8C  F002         	call	_RSI_Timer0	;wreg free
  1059  00000E  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1060  000010  0011               	retfie		f
  1061  000012                     __end_of_High_RSI:
  1062                           	opt callstack 0
  1063                           
  1064 ;; *************** function _RSI_Timer0 *****************
  1065 ;; Defined at:
  1066 ;;		line 25 in file "TAD_TIMER.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1
  1080 ;;      Params:         0       0       0
  1081 ;;      Locals:         0       0       0
  1082 ;;      Temps:          0       0       0
  1083 ;;      Totals:         0       0       0
  1084 ;;Total ram usage:        0 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_High_RSI
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text7
  1094  000518                     __ptext7:
  1095                           	opt callstack 0
  1096  000518                     _RSI_Timer0:
  1097                           	opt callstack 27
  1098                           
  1099                           ;TAD_TIMER.c: 27:     TMR0=56;
  1100                           
  1101                           ;incstack = 0
  1102  000518  0E00               	movlw	0
  1103  00051A  6ED7               	movwf	215,c	;volatile
  1104  00051C  0E38               	movlw	56
  1105  00051E  6ED6               	movwf	214,c	;volatile
  1106                           
  1107                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  1108  000520  94F2               	bcf	4082,2,c	;volatile
  1109                           
  1110                           ;TAD_TIMER.c: 29:     Tics++;
  1111  000522  0E01               	movlw	1
  1112  000524  2615               	addwf	_Tics^0,f,c	;volatile
  1113  000526  0E00               	movlw	0
  1114  000528  2216               	addwfc	(_Tics+1)^0,f,c	;volatile
  1115  00052A  2217               	addwfc	(_Tics+2)^0,f,c	;volatile
  1116  00052C  2218               	addwfc	(_Tics+3)^0,f,c	;volatile
  1117  00052E  0012               	return		;funcret
  1118  000530                     __end_of_RSI_Timer0:
  1119                           	opt callstack 0
  1120                           
  1121                           	psect	rparam
  1122  0000                     
  1123                           	psect	temp
  1124  000039                     btemp:
  1125                           	opt callstack 0
  1126  000039                     	ds	1
  1127  0000                     int$flags	set	btemp
  1128  0000                     wtemp8	set	btemp+1
  1129  0000                     ttemp5	set	btemp+1
  1130  0000                     ttemp6	set	btemp+4
  1131  0000                     ttemp7	set	btemp+8
  1132                           tosu	equ	0xFFF
  1133                           tosh	equ	0xFFE
  1134                           tosl	equ	0xFFD
  1135                           stkptr	equ	0xFFC
  1136                           pclatu	equ	0xFFB
  1137                           pclath	equ	0xFFA
  1138                           pcl	equ	0xFF9
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           indf0	equ	0xFEF
  1146                           postinc0	equ	0xFEE
  1147                           postdec0	equ	0xFED
  1148                           preinc0	equ	0xFEC
  1149                           plusw0	equ	0xFEB
  1150                           fsr0h	equ	0xFEA
  1151                           fsr0l	equ	0xFE9
  1152                           wreg	equ	0xFE8
  1153                           indf1	equ	0xFE7
  1154                           postinc1	equ	0xFE6
  1155                           postdec1	equ	0xFE5
  1156                           preinc1	equ	0xFE4
  1157                           plusw1	equ	0xFE3
  1158                           fsr1h	equ	0xFE2
  1159                           fsr1l	equ	0xFE1
  1160                           bsr	equ	0xFE0
  1161                           indf2	equ	0xFDF
  1162                           postinc2	equ	0xFDE
  1163                           postdec2	equ	0xFDD
  1164                           preinc2	equ	0xFDC
  1165                           plusw2	equ	0xFDB
  1166                           fsr2h	equ	0xFDA
  1167                           fsr2l	equ	0xFD9
  1168                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    72
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     19      56
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_motorKeypad
    _motorKeypad->_TI_GetTics

Critical Paths under _High_RSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _High_RSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_RSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     160
                            _TI_Init
                            _initSIO
                        _motorKeypad
 ---------------------------------------------------------------------------------
 (1) _motorKeypad                                          6     6      0     115
                                             13 COMRAM     6     6      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      45
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _High_RSI                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (4) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TI_Init
   _initSIO
   _motorKeypad
     _TI_GetTics
     _TI_ResetTics

 _High_RSI (ROOT)
   _RSI_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     13      38       1       44.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      38       7        0.0%
DATA                 0      0      38       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Apr 18 10:25:13 2023

               _RSI_Timer0 0518                 _TI_GetTics 044A                        l247 03B0  
                      l993 049A                        u220 02AA                        u310 03F2  
                      u240 02DE                        _key 001F                        _sms 0201  
                      wreg 000FE8               __CFG_WDT$OFF 000000                       l1201 0320  
                     l1207 0332                       l1233 03C6                       l1225 03B4  
                     l1209 033A                       l1161 0262                       l1227 03BA  
                     l1155 024C                       l1173 028E                       l1165 0272  
                     l1253 0414                       l1247 0408                       l1239 03DC  
                     l1191 02C8                       l1183 02B0                       l1167 0278  
                     l1185 02B6                       l1273 0512                       l1179 02A0  
                     l1199 0318      motorKeypad@rowPressed 001A                       _TMR0 000FD6  
                     _Tics 0015                       _Rows 0023                       _main 04FE  
                     fsr2h 000FDA                       indf2 000FDF                       fsr2l 000FD9  
                     btemp 0039            __end_of_TI_Init 04C0      __size_of_TI_ResetTics 0024  
        motorKeypad@keyAux 0019                       prodl 000FF3                       start 0012  
             ___param_bank 000000            _motorKeypad$590 0035            _motorKeypad$591 0037  
                    ?_main 0026                      _T0CON 000FD5                      _TMR0L 000FD6  
                    _SPBRG 000FAF                      _PORTB 000F81                      _PORTC 000F82  
                    _Timer 0025            __end_of_initSIO 053E               _TI_ResetTics 04C0  
                    tablat 000FF5                      ttemp5 003A                      ttemp6 003D  
                    ttemp7 0041                      status 000FD8                      wtemp8 003A  
         __end_of_High_RSI 0012            __initialization 04E4               __end_of_main 0518  
              ?_RSI_Timer0 0026             TI_Init@counter 0026                ?_TI_GetTics 0026  
                   ??_main 0039              __activetblptr 000002                  ??_TI_Init 0026  
                   _OSCCON 000FD3                     _TMR0IF 007F92                     _RowAct 0021  
                   _Timers 0001               ?_motorKeypad 0026                     _keyNum 001E  
                   clear_0 04EA                  ??_initSIO 0026               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
      __size_of_RSI_Timer0 0018        __size_of_TI_GetTics 004C                 __accesstop 0080  
  __end_of__initialization 04F0            __CFG_PBADEN$DIG 000000              ___rparam_used 000001  
           __pcstackCOMRAM 0026            __CFG_OSC$INTIO2 000000                  ?_High_RSI 0026  
  TI_ResetTics@TimerHandle 0026                 ??_High_RSI 0026                    _TI_Init 0496  
                  _Columns 0022                    __Hparam 0000                    __Lparam 0000  
             ??_RSI_Timer0 0026               __psmallconst 0200               ??_TI_GetTics 002A  
                  __pcinit 04E4                    __ramtop 0200       __size_of_motorKeypad 0200  
                  __ptext0 04FE                    __ptext1 024A                    __ptext2 04C0  
                  __ptext3 044A                    __ptext4 0530                    __ptext5 0496  
                  __ptext7 0518          __end_of_keyNumber 0249                    _initSIO 0530  
     end_of_initialization 04F0         __end_of_RSI_Timer0 0530              __Lmediumconst 0000  
       __end_of_TI_GetTics 0496                  _RCSTAbits 000FAB                    postinc0 000FEE  
                  postinc2 000FDE      TI_GetTics@TimerHandle 0032                 _tmr_bounce 0024  
                _TXSTAbits 000FAC           motorKeypad@state 001C                  _ColumnAct 0020  
      start_initialization 04E4                __end_of_sms 023D          __size_of_High_RSI 000A  
              __pbssCOMRAM 0001              ?_TI_ResetTics 0026                   ?_TI_Init 0026  
                __pintcode 0008                   ?_initSIO 0026                __smallconst 0200  
                _keyNumber 023D             ??_TI_ResetTics 0026                   _LATCbits 000F8B  
                 _RCONbits 000FD0              ??_motorKeypad 0033                   _High_RSI 0008  
         __size_of_TI_Init 002A                   __Hrparam 0000                   __Lrparam 0000  
      __end_of_motorKeypad 044A           __size_of_initSIO 000E                   _indexSMS 001D  
            __size_of_main 001A       __end_of_TI_ResetTics 04E4                   int$flags 0039  
    motorKeypad@colPressed 001B                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
TI_GetTics@CopiaTicsActual 002E                   intlevel2 0000                _motorKeypad 024A  
